name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      repository-projects: read
      contents: write
      packages: read

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Read version
        id: version
        run: |
          echo "Tag name: ${{ github.ref_name }}"
          TAG_NAME="${{ github.ref_name }}"
          VERSION=$(echo "$TAG_NAME" | sed 's/^v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Tag version: $VERSION"

      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: HAL-guru/hal.guru-robots-core
          path: source-repo
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Download source release assets
        id: download-assets
        run: |
          TAG_NAME="${{ github.ref_name }}"
          mkdir -p assets
          cd source-repo
          if git ls-remote --tags origin $TAG_NAME | grep -q $TAG_NAME; then
            echo "Tag $TAG_NAME found in source repo"
          
            RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              "https://api.github.com/repos/HAL-guru/hal.guru-robots-core/releases/tags/$TAG_NAME")
          
            if [ "$(echo "$RELEASE_INFO" | jq -r '.message')" == "Not Found" ]; then
              echo "Release not found for tag $TAG_NAME"
              echo "::set-output name=has_assets::false"
              exit 0
            fi
          
            ASSETS_LIST=$(echo "$RELEASE_INFO" | jq -r '.assets[] | {name: .name, id: .id}')
            if [ -n "$ASSETS_LIST" ]; then
              cd ../assets
              echo "$ASSETS_LIST" | jq -c '.' | while read -r asset; do
                ASSET_ID=$(echo "$asset" | jq -r '.id')
                ASSET_NAME=$(echo "$asset" | jq -r '.name')
                echo "Downloading $ASSET_NAME (ID: $ASSET_ID)"
          
                curl -s -L -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                  -H "Accept: application/octet-stream" \
                  "https://api.github.com/repos/HAL-guru/hal.guru-robots-core/releases/assets/$ASSET_ID" \
                  --output "$ASSET_NAME"
          
                if [ -f "$ASSET_NAME" ]; then 
                  if grep -q "Not Found" "$ASSET_NAME"; then
                    echo "::error::Failed to download $ASSET_NAME (received 'Not Found' response)"
                  else
                    echo "Successfully downloaded $ASSET_NAME"
                  fi
                else
                  echo "::error::Failed to download $ASSET_NAME"
                fi
              done
              echo "::set-output name=has_assets::true"
            else
              echo "No assets found for release $TAG_NAME"
              echo "::set-output name=has_assets::false"
            fi
          else
            echo "Tag $TAG_NAME not found in source repository"
            echo "::set-output name=has_assets::false"
          fi

      - name: Check assets
        run: |
          ls -la assets
          FILE_COUNT=$(find assets -type f | wc -l)
          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "::error::Empty directory."
            exit 1
          fi
    
          SMALL_FILES=$(find assets -type f -printf "%s %p\n" | awk '$1 < 1024 {print}' | wc -l)
          if [ "$SMALL_FILES" -gt 0 ]; then
            echo "::error::Founds found less than 1KB:"
            find assets -type f -printf "%s %p\n" | awk '$1 < 1024 {print $2}' | xargs ls -lh
            exit 1
          fi
          echo "Success! All downloaded files are larger than 1KB."


      - name: Create/Update Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
